from base64 import b64decode, b64encode
from typing import Optional

import click

from client import SlackClientProxy
from models import Workflow, WorkflowStatus, WorkflowStep, WorkflowStepStatus


def dump_context(workflow: Workflow):
    print(
        b64encode(workflow.context_payload.encode('UTF-8')).decode('UTF-8')
    )


def load_context(b64_str: str) -> Workflow:
    return Workflow.parse_raw(
        b64decode(b64_str.encode('UTF-8')).decode('UTF-8')
    )



@click.command(help="Creates a new workflow context")
@click.option('--description',
              help="The description of your workflow. Only plain text is allowed.")
@click.option('--channel',
              help="The channel to send messages to.")
def initialize_workflow(description: str, channel: str):
    workflow = Workflow(
        description=description,
        channel_name=channel,
    )
    client = SlackClientProxy()
    client.create_workflow_canvas(workflow)
    dump_context(workflow)


@click.command(help='Adds a step to an existing workflow.')
@click.option('--description',
              help="The description of your step. This can include mrkdwn formatting.")
@click.option('--step-status', default=WorkflowStepStatus.not_started.value,
              help="The status of the workflow step.")
@click.option('--context-token',
              help="The workflow context to which you want to add a step.")
@click.option('--workflow-status', default=None,
              help="(Optional) A new status for the workflow itself.")
@click.option('--step-id', default=None,
              help="An optional identifier for the step, otherwise this will be autogenerated.")
def initialize_step(description: str,
                    step_status: str,
                    context_token: str,
                    workflow_status: Optional[str] = None,
                    step_id: Optional[str] = None):
    workflow = load_context(context_token)
    if workflow_status:
        workflow.status = WorkflowStatus(workflow_status)

    step = WorkflowStep(
        description=description,
        status=WorkflowStepStatus(step_status),
    )
    if step_id:
        step.step_id = step_id

    assert step.step_id
    workflow.steps.append(step)
    SlackClientProxy().update_workflow_canvas(workflow)
    dump_context(workflow)


@click.command(help='Update an already initialized step')
@click.option('--step-status', help="The new status for the step", default=None)
@click.option('--workflow-status', help="The new status for the workflow", default=None)
@click.option('--context-token', help='Required. The workflow context json.')
@click.option('--step-id', help='Required if step-status is provided. The id of the step to update.')
def update_workflow(
    step_status: str,
    workflow_status: str,
    context_token: str,
    step_id: Optional[str] = None
):
    workflow = load_context(context_token)

    if workflow_status:
        workflow.status = WorkflowStatus(workflow_status)

    if step_status:
        step = None
        if step_id:
            for step in workflow.steps:
                if step.step_id == step_id:
                    break
        if not step:
            raise ValueError(f'No step named {step_id}')

        if step_status:
            step.status = WorkflowStepStatus(step_status)

    SlackClientProxy().update_workflow_canvas(workflow)
    dump_context(workflow)


@click.group(help="Creates and maintains a slack workflow context")
def cli():
    pass


cli.add_command(initialize_workflow)
cli.add_command(initialize_step)
cli.add_command(update_workflow)


if __name__ == "__main__":
    cli()
