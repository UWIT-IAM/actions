import os
from typing import Optional
from uuid import uuid4

import click
import json

from client import DatastoreClient, WorkflowCanvasClient
from models import Workflow, WorkflowStatus, WorkflowStep, WorkflowStepStatus

MAX_CONTEXT_ELEMENTS = 9

def print_action_output(output_name: str, output_value: str):
    print(f"::set-output name={output_name}::{output_value}")


@click.command(help="Creates a new workflow canvas")
@click.option('--description', required=True,
              help="The description of your workflow. Only plain text is allowed.")
@click.option('--canvas-id', default=str(uuid4()))
@click.option('--channel', required=True,
              help="The channel to send messages to.")
def create_canvas(description: str, channel: str, canvas_id: str):
    workflow = Workflow(
        description=description,
        channel_name=channel,
        workflow_id=canvas_id,
    )
    canvas_client = WorkflowCanvasClient()
    datastore_client = DatastoreClient()
    canvas_client.create_workflow_canvas(workflow)
    datastore_client.store_workflow(workflow)
    print_action_output('canvas-id', workflow.workflow_id)


@click.command(help='Adds a step to an existing workflow.')
@click.option('--description', required=True,
              help="The description of your step. This can include mrkdwn formatting.")
@click.option('--step-status', default=WorkflowStepStatus.not_started.value,
              help="The status of the workflow step.")
@click.option('--canvas-id', required=True,
              help="The canvas id you are adding a step to")
@click.option('--workflow-status',
              help="(Optional) A new status for the workflow itself.")
@click.option('--step-id',
              help="An optional identifier for the step, otherwise this will be autogenerated.")
def create_step(description: str,
                step_status: str,
                canvas_id: str,
                workflow_status: Optional[str] = None,
                step_id: Optional[str] = None):
    datastore_client = DatastoreClient()
    with datastore_client.lock_workflow(canvas_id):
        workflow = datastore_client.load_workflow(canvas_id)
        step = WorkflowStep(
            description=description,
            status=WorkflowStepStatus(step_status),
        )
        if step_id:
            step.step_id = step_id

        if workflow_status:
            workflow.status = WorkflowStatus(workflow_status)
        print_action_output('step-id', step.step_id)
        workflow.steps.append(step)
        datastore_client.store_workflow(workflow)
        WorkflowCanvasClient().update_workflow_canvas(workflow)
    print_action_output('lock-id', datastore_client.lock_id)


@click.command(help='Update an already initialized step')
@click.option('--canvas-id', required=True, help='Required. The workflow canvas json.')
@click.option('--step-status', help="The new status for the step", default=None)
@click.option('--workflow-status', help="The new status for the workflow", default=None)
@click.option('--step-id', help='Required if step-status is provided. The id of the step to update.')
def update_workflow(
    step_status: str,
    workflow_status: str,
    canvas_id: str,
    step_id: Optional[str] = None
):
    datastore_client = DatastoreClient()
    with datastore_client.lock_workflow(canvas_id):
        workflow = datastore_client.load_workflow(canvas_id)
        if workflow_status:
            workflow.status = WorkflowStatus(workflow_status)

        if step_status:
            step = None
            if step_id:
                try:
                    step = next(s for s in workflow.steps if s.step_id == step_id)
                except StopIteration:
                    raise ValueError(f'No step named {step_id}')

            step.status = WorkflowStepStatus(step_status)

        datastore_client.store_workflow(workflow)
        WorkflowCanvasClient().update_workflow_canvas(workflow)
    print_action_output('lock-id', datastore_client.lock_id)


@click.command(help='Add a context artifact to the workflow canvas')
@click.option('--description', help='The mrkdwn for your context artifact.')
@click.option('--canvas-id', help='Your b64-encoded canvas.')
def add_artifact(description: str, canvas_id: str):
    datastore_client = DatastoreClient()
    with datastore_client.lock_workflow(canvas_id):
        workflow = datastore_client.load_workflow(canvas_id)
        if len(workflow.artifacts) >= MAX_CONTEXT_ELEMENTS:
            raise IndexError(f"A maximum of {MAX_CONTEXT_ELEMENTS} artifacts per canvas can be attached.")

        workflow.artifacts.append(f'> {description}')
        datastore_client.store_workflow(workflow)
        WorkflowCanvasClient().update_workflow_canvas(workflow)


@click.command(help="Mark a workflow is complete and delete its context from Datastore.")
@click.option('--canvas-id', help='Required.', required=True)
@click.option('--workflow-status', help="Optional: the final workflow status to set", default=None)
def finalize_workflow(canvas_id: str, workflow_status: str):
    if workflow_status:
        workflow_status = WorkflowStatus(workflow_status)
    datastore_client = DatastoreClient()
    with datastore_client.lock_workflow(canvas_id):
        workflow = datastore_client.load_workflow(canvas_id)
        workflow.artifacts.pop(0)
        workflow.artifacts.insert(0, 'COMPLETE')
        if workflow_status:
            workflow.status = workflow_status
        datastore_client.store_workflow(workflow)
        WorkflowCanvasClient().update_workflow_canvas(workflow)
        datastore_client.delete_workflow(workflow.workflow_id)
    datastore_client.delete_lock(workflow.workflow_id)


@click.command(help="Simply dump workflow json and exit.")
@click.option('--canvas-id', help='Required.', required=True)
def get_canvas_json(canvas_id: str):
    datastore_client = DatastoreClient()
    workflow = datastore_client.load_workflow(canvas_id)
    payload = json.dumps(workflow.canvas_payload)
    print(payload)
    print_action_output('canvas-json', payload)

@click.group(help="Creates and maintains a slack workflow canvas.")
def cli():
    pass


cli.add_command(create_canvas)
cli.add_command(create_step)
cli.add_command(update_workflow)
cli.add_command(add_artifact)
cli.add_command(finalize_workflow)


if __name__ == "__main__":
    cli()
    print_action_output('fingerprint', os.environ.get('FINGERPRINT'))
